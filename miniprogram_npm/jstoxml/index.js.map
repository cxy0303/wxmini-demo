{"version":3,"sources":["jstoxml.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var toXML = function(obj, config){\n  // include XML header\n  config = config || {};\n  var out = '';\n  if(config.header) {\n    if(typeof config.header == 'string') {\n      out = config.header;\n    } else {\n      out = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    }\n  }\n  \n  var origIndent = config.indent || '';\n  var indent = '';\n\n  var filter = function customFilter(txt) {\n    if(!config.filter) return txt;\n    var mappings = config.filter;\n    var replacements = [];\n    for(var map in mappings) {\n      if(!mappings.hasOwnProperty(map)) continue;\n      replacements.push(map);\n    }\n    return String(txt).replace(new RegExp('(' + replacements.join('|') + ')', 'g'), function(str, entity) {\n      return mappings[entity] || '';\n    });\n  };\n  \n  // helper function to push a new line to the output\n  var push = function(string){\n    out += string + (origIndent ? '\\n' : '');\n  };\n  \n  /* create a tag and add it to the output\n     Example:\n     outputTag({\n       name: 'myTag',      // creates a tag <myTag>\n       indent: '  ',       // indent string to prepend\n       closeTag: true,     // starts and closes a tag on the same line\n       selfCloseTag: true,\n       attrs: {            // attributes\n         foo: 'bar',       // results in <myTag foo=\"bar\">\n         foo2: 'bar2'\n       }\n     });\n  */\n  var outputTag = function(tag){\n    var attrsString = '';\n    var outputString = '';\n    var attrs = tag.attrs || '';\n    \n    // turn the attributes object into a string with key=\"value\" pairs\n    for(var attr in attrs){\n      if(attrs.hasOwnProperty(attr)) {\n        attrsString += ' ' + attr + '=\"' + attrs[attr] + '\"';\n      }\n    }\n\n    // assemble the tag\n    outputString += (tag.indent || '') + '<' + (tag.closeTag ? '/' : '') + tag.name + (!tag.closeTag ? attrsString : '') + (tag.selfCloseTag ? '/' : '') + '>';\n    \n    // if the tag only contains a text string, output it and close the tag\n    if(tag.text || tag.text === ''){\n      outputString += filter(tag.text) + '</' + tag.name + '>';\n    }\n    \n    push(outputString);\n  };\n  \n  // custom-tailored iterator for input arrays/objects (NOT a general purpose iterator)\n  var every = function(obj, fn, indent){\n    // array\n    if(Array.isArray(obj)){\n      obj.every(function(elt){  // for each element in the array\n        fn(elt, indent);\n        return true;            // continue to iterate\n      });\n      \n      return;\n    }\n    \n    // object with tag name\n    if(obj._name){\n      fn(obj, indent);\n      return;\n    }\n    \n    // iterable object\n    for(var key in obj){\n      var type = typeof obj[key];\n\n      if(obj.hasOwnProperty(key) && (obj[key] || type === 'boolean' || type === 'number')){\n        fn({_name: key, _content: obj[key]}, indent);\n      //} else if(!obj[key]) {   // null value (foo:'')\n      } else if(obj.hasOwnProperty(key) && obj[key] === null) {   // null value (foo:null)\n        fn(key, indent);       // output the keyname as a string ('foo')\n      } else if(obj.hasOwnProperty(key) && obj[key] === '') {\n        // blank string\n        outputTag({\n          name: key,\n          text: ''\n        });\n      }\n    }\n  };\n  \n  var convert = function convert(input, indent){\n    var type = typeof input;\n    \n    if(!indent) indent = '';\n    \n    if(Array.isArray(input)) type = 'array';\n    \n    var path = {\n      'string': function(){\n        push(indent + filter(input));\n      },\n\n      'boolean': function(){\n        push(indent + (input ? 'true' : 'false'));\n      },\n      \n      'number': function(){\n        push(indent + input);\n      },\n      \n      'array': function(){\n        every(input, convert, indent);\n      },\n      \n      'function': function(){\n        push(indent + input());\n      },\n      \n      'object': function(){\n        if(!input._name){\n          every(input, convert, indent);\n          return;\n        }\n        \n        var outputTagObj = {\n          name: input._name,\n          indent: indent,\n          attrs: input._attrs\n        };\n        \n        var type = typeof input._content;\n\n        if(type === 'undefined' || input._content._selfCloseTag === true){\n          if (input._content && input._content._attrs) {\n            outputTagObj.attrs = input._content._attrs;\n          }\n          outputTagObj.selfCloseTag = true;\n          outputTag(outputTagObj);\n          return;\n        }\n        \n        var objContents = {\n          'string': function(){\n            outputTagObj.text = input._content;\n            outputTag(outputTagObj);\n          },\n\n          'boolean': function(){\n            outputTagObj.text = (input._content ? 'true' : 'false');\n            outputTag(outputTagObj);\n          },\n          \n          'number': function(){\n            outputTagObj.text = input._content.toString();\n            outputTag(outputTagObj);\n          },\n          \n          'object': function(){  // or Array\n            outputTag(outputTagObj);\n            \n            every(input._content, convert, indent + origIndent);\n            \n            outputTagObj.closeTag = true;\n            outputTag(outputTagObj);\n          },\n          \n          'function': function(){\n            outputTagObj.text = input._content();  // () to execute the fn\n            outputTag(outputTagObj);\n          }\n        };\n        \n        if(objContents[type]) objContents[type]();\n      }\n      \n    };\n    \n    if(path[type]) path[type]();\n  };\n  \n  convert(obj, indent);\n  \n  return out;\n};\n\nexports.toXML = toXML;\n"]}