{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nmodule.exports = (stream, throwError) => {\n  return new Promise((resolve, reject) => {\n    if (typeof stream.resume !== 'function') {\n      return resolve();\n    }\n\n    // unpipe it\n    stream.unpipe && stream.unpipe();\n    // enable resume first\n    stream.resume();\n\n    if (stream._readableState && stream._readableState.ended) {\n      return resolve();\n    }\n    if (!stream.readable || stream.destroyed) {\n      return resolve();\n    }\n\n    function cleanup() {\n      stream.removeListener('end', onEnd);\n      stream.removeListener('close', onEnd);\n      stream.removeListener('error', onError);\n    }\n\n    function onEnd() {\n      cleanup();\n      resolve();\n    }\n\n    function onError(err) {\n      cleanup();\n      // don't throw error by default\n      if (throwError) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    }\n\n    stream.on('end', onEnd);\n    stream.on('close', onEnd);\n    stream.on('error', onError);\n  });\n};\n"]}