{"version":3,"sources":["index.js","mkdirp.js","lib\\wrap.js","rimraf.js","glob.js","sleep.js","nextTick.js","setImmediate.js","pump.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA,AENA;ADIA,AFMA,AGTA;ADIA,AFMA,AGTA;ADIA,AFMA,AIZA,ADGA;AHUA,AIZA;AJaA,AIZA;AJaA,AIZA,ACHA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AMlBA,ADGA;ALgBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nmodule.exports = {\n  mkdirp: require('./mkdirp'),\n  rimraf: require('./rimraf'),\n  glob: require('./glob'),\n  sleep: require('./sleep'),\n  nextTick: require('./nextTick'),\n  setImmediate: require('./setImmediate'),\n  pump: require('./pump'),\n};\n","\n\nconst mkdirp = require('mkdirp');\nconst wrap = require('./lib/wrap');\n\nmodule.exports = wrap(mkdirp);\n","\n\nmodule.exports = mod => {\n  const wrapped = (args1, args2, args3, args4) => {\n    // arrow function can't bind arguments, and can't use rest in node@4, sign\n    const args = [ args1, args2, args3, args4 ];\n    for (let i = args.length - 1; i >= 0; i--) {\n      if (args[i] !== undefined) break;\n      args.pop();\n    }\n\n    return new Promise((resolve, reject) => {\n      args.push(function mZmodulesWrapCallback(err, result) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n      mod.apply(null, args);\n    });\n  };\n\n  for (const key in mod) {\n    wrapped[key] = mod[key];\n  }\n\n  return wrapped;\n};\n","\n\nconst rimraf = require('rimraf');\nconst wrap = require('./lib/wrap');\n\nmodule.exports = wrap(rimraf);\n","\n\nconst glob = require('glob');\nconst wrap = require('./lib/wrap');\n\nmodule.exports = wrap(glob);\n","\n\nmodule.exports = require('ko-sleep');\n","\n\nmodule.exports = () => Promise.resolve();\n","\n\nmodule.exports = () => new Promise(resolve => setImmediate(resolve));\n","\n\nconst pump = require('pump');\nconst wrap = require('./lib/wrap');\n\nmodule.exports = wrap(pump);\n"]}